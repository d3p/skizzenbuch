/*
 * Mathematik
 *
 * Copyright (C) 2005 Patrick Kochlik + Dennis Paul
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * {@link http://www.gnu.org/licenses/lgpl.html}
 *
 */


package mathematik;


import java.io.Serializable;


public class Intersection
    implements Serializable {

    private static final long serialVersionUID = -5392974339890719551L;

    private static final double SMALLEST_ACCEPTABLE_DISTANCE = 0.00001f;

    private static final Vector3f h = new Vector3f();

    private static final Vector3f s = new Vector3f();

    private static final Vector3f q = new Vector3f();

    private static final Vector3f myPlaneEdgeA = new Vector3f();

    private static final Vector3f myPlaneEdgeB = new Vector3f();

    private static final Vector3f myNormal = new Vector3f();

    /**
     * grabbed from Xith
     * @todo not sure whether this is for ray-plane or
     * line-plane intersection. but i think it s for latter,
     * hence the method name.
     * @param thePlane Plane3f
     * @param theRay Ray3f
     * @param theIntersectionPoint Vector3f
     * @return float
     */
    public static float intersectLinePlane(Ray3f theRay,
                                           Plane3f thePlane,
                                           Vector3f theIntersectionPoint) {
        double time = 0;
        myNormal.cross(thePlane.vectorA, thePlane.vectorB);
        double denom = myNormal.dot(theRay.direction);

        if (denom == 0) {
            System.err.println("### ERROR @ Intersection / NEGATIVE_INFINITY");
            return Float.NEGATIVE_INFINITY;
        }

        double numer = myNormal.dot(theRay.origin);
        double D = - (thePlane.origin.dot(myNormal));
        time = - ( (numer + D) / denom);

        if (theIntersectionPoint != null) {
            theIntersectionPoint.set(theRay.direction);
            theIntersectionPoint.scale( (float) time);
            theIntersectionPoint.add(theRay.origin);
        }

        return (float) time;
    }


    public static float intersectRayTriangle(Vector3f theRayOrigin,
                                             Vector3f theRayDirection,
                                             Vector3f thePlanePointA,
                                             Vector3f thePlanePointB,
                                             Vector3f thePlanePointC,
                                             Vector3f theResult,
                                             boolean theCullingFlag) {
        float a;
        float f;
        float u;
        float v;
        float t;

        myPlaneEdgeA.sub(thePlanePointB,
                         thePlanePointA);
        myPlaneEdgeB.sub(thePlanePointC,
                         thePlanePointA);

        h.cross(theRayDirection,
                myPlaneEdgeB);

        a = myPlaneEdgeA.dot(h);
        if (a > -SMALLEST_ACCEPTABLE_DISTANCE && a < SMALLEST_ACCEPTABLE_DISTANCE) {
            return Float.NaN;
        }
        if (theCullingFlag) {
            // u
            s.sub(theRayOrigin,
                  thePlanePointA);
            u = s.dot(h);
            if (u < 0.0f || u > a) {
                return Float.NaN;
            }
            // v
            v = theRayDirection.dot(q);
            if (v < 0.0f || u + v > a) {
                return Float.NaN;
            }
            // t
            q.cross(s,
                    myPlaneEdgeA);
            t = myPlaneEdgeB.dot(q);
            // invert
            f = 1.0f / a;
            u *= f;
            v *= f;
            t *= f;
        } else {
            f = 1f / a;
            // u
            s.sub(theRayOrigin,
                  thePlanePointA);
            u = f * s.dot(h);
            if (u < 0.0f || u > 1.0f) {
                return Float.NaN;
            }
            // v
            q.cross(s,
                    myPlaneEdgeA);
            v = f * theRayDirection.dot(q);
            if (v < 0.0 || u + v > 1.0) {
                return Float.NaN;
            }
            // t
            t = myPlaneEdgeB.dot(q) * f;
        }
        // result
        theResult.scale(t,
                        theRayDirection);
        theResult.add(theRayOrigin);

        return t;
    }


    public static boolean intersectRayPlane(Vector3f theRayOrigin,
                                            Vector3f theRayDirection,
                                            Vector3f thePlanePointA,
                                            Vector3f thePlanePointB,
                                            Vector3f thePlanePointC,
                                            Vector3f theResult) {
        float a;
        float f;
        float u;
        float v;
        float t;

        myPlaneEdgeA.sub(thePlanePointB,
                         thePlanePointA);
        myPlaneEdgeB.sub(thePlanePointC,
                         thePlanePointA);
        h.cross(theRayDirection,
                myPlaneEdgeB);

        a = myPlaneEdgeA.dot(h);
        if (a > -SMALLEST_ACCEPTABLE_DISTANCE && a < SMALLEST_ACCEPTABLE_DISTANCE) {
            return false; // parallel
        }
        // u
        s.sub(theRayOrigin,
              thePlanePointA);
        u = s.dot(h);
        // v
        v = theRayDirection.dot(q);
        // t
        q.cross(s,
                myPlaneEdgeA);
        t = myPlaneEdgeB.dot(q);
        // invert
        f = 1.0f / a;
        u *= f;
        v *= f;
        t *= f;

        // result
        theResult.scale(t,
                        theRayDirection);
        theResult.add(theRayOrigin);

        return true;
    }


    public static boolean intersectRayPlane(Ray3f theRay,
                                            Plane3f thePlane,
                                            Vector3f theResult) {
        float a;
        float f;
        float u;
        float v;
        float t;

        myPlaneEdgeA.set(thePlane.vectorA);
        myPlaneEdgeB.set(thePlane.vectorB);
        h.cross(theRay.direction,
                myPlaneEdgeB);

        a = myPlaneEdgeA.dot(h);
        if (a > -SMALLEST_ACCEPTABLE_DISTANCE && a < SMALLEST_ACCEPTABLE_DISTANCE) {
            return false; // parallel
        }
        // u
        s.sub(theRay.origin,
              thePlane.origin);
        u = s.dot(h);
        // v
        v = theRay.direction.dot(q);
        // t
        q.cross(s,
                myPlaneEdgeA);
        t = myPlaneEdgeB.dot(q);
        // invert
        f = 1.0f / a;
        u *= f;
        v *= f;
        t *= f;

        // result
        theResult.scale(t,
                        theRay.direction);
        theResult.add(theRay.origin);

        return true;
    }
}
